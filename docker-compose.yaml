x-worker-config: &worker-config
  build: .
  environment:
    - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    - PYTHONUNBUFFERED=1
    - PYTHONHASHSEED=random
    - CUDA_VISIBLE_DEVICES=0
  depends_on:
    db:
      condition: service_healthy
  env_file:
    - .env
  restart: on-failure:5
  init: true  # Для корректной обработки сигналов
  # Ограничиваем ресурсы для стабильности
  deploy:
    resources:
      reservations:
        devices:
          - driver: nvidia
            count: 1
            capabilities: [gpu]

services:
  parser:
    build: .
    command: python parser.py
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
    env_file:
      - .env
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MAX_CONNECTIONS=200
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env

  # Динамические воркеры (можно создать много)
  worker-1: &worker-template
    <<: *worker-config
    command: python processing.py --worker-id=1 --total-workers=${TOTAL_WORKERS:-15}

  worker-2:
    <<: *worker-template
    command: python processing.py --worker-id=2 --total-workers=${TOTAL_WORKERS:-15}

  worker-3:
    <<: *worker-template
    command: python processing.py --worker-id=3 --total-workers=${TOTAL_WORKERS:-15}

  worker-4:
    <<: *worker-template
    command: python processing.py --worker-id=4 --total-workers=${TOTAL_WORKERS:-15}

  worker-5:
    <<: *worker-template
    command: python processing.py --worker-id=5 --total-workers=${TOTAL_WORKERS:-15}

  worker-6:
    <<: *worker-template
    command: python processing.py --worker-id=6 --total-workers=${TOTAL_WORKERS:-15}

  worker-7:
    <<: *worker-template
    command: python processing.py --worker-id=7 --total-workers=${TOTAL_WORKERS:-15}

  worker-8:
    <<: *worker-template
    command: python processing.py --worker-id=8 --total-workers=${TOTAL_WORKERS:-15}

  worker-9:
    <<: *worker-template
    command: python processing.py --worker-id=9 --total-workers=${TOTAL_WORKERS:-15}

  worker-10:
    <<: *worker-template
    command: python processing.py --worker-id=10 --total-workers=${TOTAL_WORKERS:-15}

  worker-11: &worker-template
    <<: *worker-config
    command: python processing.py --worker-id=11 --total-workers=${TOTAL_WORKERS:-15}

  worker-12:
    <<: *worker-template
    command: python processing.py --worker-id=12 --total-workers=${TOTAL_WORKERS:-15}

  worker-13:
    <<: *worker-template
    command: python processing.py --worker-id=13 --total-workers=${TOTAL_WORKERS:-15}

  worker-14:
    <<: *worker-template
    command: python processing.py --worker-id=14 --total-workers=${TOTAL_WORKERS:-15}

  worker-15:
    <<: *worker-template
    command: python processing.py --worker-id=15 --total-workers=${TOTAL_WORKERS:-15}

volumes:
  postgres_data: