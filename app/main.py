# –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
import time
import os
import asyncio
import argparse
from concurrent.futures import ProcessPoolExecutor
# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏
from app.database import setup_database
from app.parser import Parser
from app.parser_pdf import ParserPDF
from app.crud import (sql_add_new_legislation, sql_get_authorities_by_more_id,
                      sql_get_legislation_by_not_binary_pdf, sql_update_binary_pdf,
                      sql_get_legislation_by_have_binary_and_not_text, sql_update_text)
from app.config import get_config


config = get_config()


async def worker_parser_data(
    current_id: int
):
    await setup_database()

    authorities = await sql_get_authorities_by_more_id(current_id=current_id)

    for authority in authorities:
        config.logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å ({authority.id}) {authority.name}")

        parser = Parser(uuid_authority=authority.uuid_authority)
        results = await parser.async_run()

        config.logger.info(f"–í—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–æ: {len(results)}")
        for i, result in enumerate(results):
            config.logger.info(f"–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É. –ò—Ç–µ—Ä–∞—Ü–∏—è: {i+1}/{len(results)}")
            await sql_add_new_legislation(
                authority_id=authority.id,
                data=result
            )


async def worker_parser_pdf():
    await setup_database()

    while True:
        all_legislation = await sql_get_legislation_by_not_binary_pdf()
        batch_size = 300

        if len(all_legislation) == 0:
            break

        for batch_sart in range(0, len(all_legislation), batch_size):
            config.logger.info(f"–ë–µ—Ä–µ–º –ø–∞—Ä—Ç–∏—é {batch_size} –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ {batch_sart}/{len(all_legislation)}")

            batch_end = batch_sart + batch_size
            parser = ParserPDF()
            contents_binary = await parser.async_run(
                list_legislation=list(all_legislation[batch_sart:batch_end])
            )

            for i, data in enumerate(contents_binary):
                config.logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º binary_pdf –≤ —Ç–∞–±–ª–∏—Ü–µ. –ò—Ç–µ—Ä–∞—Ü–∏—è: {i + 1}/{len(contents_binary)}")
                await sql_update_binary_pdf(
                    publication_number=data[0],
                    content=data[1]
                )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
parser_instance = None


def worker_initializer():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–∞ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞)"""
    global parser_instance
    from app.parser_pdf import ParserPDF
    parser_instance = ParserPDF()
    print(f"üîÑ –í–æ—Ä–∫–µ—Ä {os.getpid()} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


def process_doc_optimized(legislation):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º"""
    try:
        start_time = time.time()
        pid = os.getpid()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞)
        text = parser_instance.extract_text_from_pdf_bytes(legislation.binary_pdf)

        end_time = time.time()
        processing_time = end_time - start_time

        print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} –∑–∞–≤–µ—Ä—à–∏–ª {legislation.publication_number} –∑–∞ {processing_time:.2f} —Å–µ–∫")

        return (legislation.publication_number, text, None)

    except Exception as e:
        print(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å {os.getpid()} –æ—à–∏–±–∫–∞ –≤ {legislation.publication_number}: {e}")
        return (legislation.publication_number, None, str(e))


async def converter_optimized(all_legislation):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—É–ª–æ–º –≤–æ—Ä–∫–µ—Ä–æ–≤"""

    if not all_legislation:
        config.logger.info("–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    total_docs = len(all_legislation)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º—É–º –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ CPU –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    max_workers = min(4, len(all_legislation), os.cpu_count() or 1)

    config.logger.info(f"üéØ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {total_docs} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ {max_workers} –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö")

    start_time = time.time()

    # –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤–æ—Ä–∫–µ—Ä–æ–≤
    with ProcessPoolExecutor(
            max_workers=max_workers,
            initializer=worker_initializer
    ) as executor:
        loop = asyncio.get_event_loop()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        futures = [
            loop.run_in_executor(executor, process_doc_optimized, leg)
            for leg in all_legislation
        ]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        successful = 0
        failed = 0
        processed = 0

        for future in asyncio.as_completed(futures):
            pub_num, text, error = await future

            if text:
                await sql_update_text(publication_number=pub_num, content=text)
                successful += 1
            else:
                config.logger.error(f"–û—à–∏–±–∫–∞ {pub_num}: {error}")
                failed += 1

            processed += 1
            if processed % 10 == 0 or processed == total_docs:
                config.logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {processed}/{total_docs}")

    total_time = time.time() - start_time
    config.logger.info(
        f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.2f} —Å–µ–∫. "
        f"–£—Å–ø–µ—à–Ω–æ: {successful}, –û—à–∏–±–æ–∫: {failed}, "
        f"–°–∫–æ—Ä–æ—Å—Ç—å: {total_docs / total_time:.2f} –¥–æ–∫/—Å–µ–∫"
    )


async def worker_convert_binary_to_text_batch():
    parser = argparse.ArgumentParser()
    parser.add_argument('--worker-id', type=int, default=1)
    parser.add_argument('--total-workers', type=int, default=1)
    args = parser.parse_args()

    # –ö–∞–∂–¥—ã–π –≤–æ—Ä–∫–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–≤–æ—é —á–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    all_docs = await sql_get_legislation_by_have_binary_and_not_text()

    if not all_docs:
        config.logger.info("–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return

    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–µ–∂–¥—É –≤–æ—Ä–∫–µ—Ä–∞–º–∏
    total_workers = args.total_workers
    batch_size = len(all_docs) // total_workers

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
    start_index = (args.worker_id - 1) * batch_size
    end_index = args.worker_id * batch_size if args.worker_id < total_workers else len(all_docs)

    docs_for_this_worker = all_docs[start_index:end_index]

    config.logger.info(
        f"–í–æ—Ä–∫–µ—Ä {args.worker_id} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç {len(docs_for_this_worker)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ {len(all_docs)}")

    await converter_optimized(docs_for_this_worker)



